%L Aasa88
%K patterns olit binder(patterns)
%A Annika Aasa
%A Kent Petersson
%A Dan Synek
%T Concrete Syntax for Data Objects in Functional Languages
%B Proceedings of the 1988 ACM Conference on Lisp
   and Functional Programming
%C Snowbird, Utah
%D 1988
%P 96-105

%L Abad90a
%K misc lambda fp binder (shelf)
%A Martin Abadi
%A Luca Cardelli
%A Pierre-Louis Curien
%A Jean-Jacques L\'evy
%T Explicit Substitutions
%R Technical Report 54
%I DEC Systems Research Center
%C Palo Alto, California
%D Feb. 6, 1990

%L Abad90b
%K temporal-logic tla binder (shelf)
%A Martin Abadi
%T An Axiomatization of Lamport's Temporal Logic of Actions
%R Technical Report 65
%I DEC Systems Research Center
%C Palo Alto, California
%D Oct. 1990

%L Abad92a
%K linear-logic binder (shelf)
%A Martin Abadi
%A Gordon D. Plotkin
%T A Logical View of Composition
%R Technical Report 86
%I DEC Systems Research Center
%C Palo Alto, California
%D May 1992

%L Abbo84a
%K concurrency other real-time scheduling
%A C. Abbott
%T Intervention Schedules for Real-Time Programming
%J IEEE Transactions on Software Engineering
%V SE-10
%N 3
%D May 1984
%P 268-274

%L Abda86a
%K olit-appl views smalltalk oopsla86
%A S. Kamal Abdali
%A Guy W. Cherry
%A Neil Soiffer
%T A Smalltalk System for Algebraic Manipulation
%J Proceedings OOPSLA '86, ACM SIGPLAN Notices
%V 21
%N 11
%D Nov 1986
%P 277-283

%L Abet89a
%K olit-db binder
%A Serge Abetiboul
%A Paris C. Kanellakis
%T Object Identity as Query Language Primitive
%R Report no. 1022
%I INRIA
%D April 1989
%O to appear, JACM

%L Abra87a
%K pcalc equivalence binder(conc)
%A Samson Abramsky
%T Observation Equivalence as a Testing Equivalence
%J Theoretical Computer Science
%V 53
%I North-Holland
%D 1987
%P 225-241

%L Abra90a
%K concurrency linear logic binder (shelf)
%A Samson Abramsky
%T Computational Interpretations of Linear Logic
%R Research Report DOC 90/20
%I Imperial College
%C London
%D Oct. 1990

%L Abra90b
%K misc lambda fp lazy binder(fp)
%A Samson Abramsky
%T The Lazy Lambda Calculus
%B Research Topics in Functional Programming
%E D.A. Turner
%I Addison Wesley
%D 1990
%P 65-116

%L Abra91a
%K pcalc mobility (uwe)
%% UNPUBLISHED
%A Samson Abramsky
%T Proofs as Processes
%D 1991
%O Vortrag auf dem International Symposium on Theoretical Computer
   Science in honor of Boris Trakhtenbrot Tel-Aviv

%L Abra92a
%K pcalc mobility (uwe)
%% UNPUBLISHED
%A Samson Abramsky
%T An Introduction to ``On the \pi-Calculus and Linear Logic''
   by Gianluigi Bellin and Philip Scott
%D 1992
%O Following Lecture Material on ``Proofs and Processes''

%L Abra93a
%K misc lambda fp lazy (laurent)
%A Samson Abramsky
%A C.-H. Luke On
%T Full Abstraction in the Lazy Lambda Calculus
%J Information and Computing
%I Academic Press
%V 105
%N 2
%D August 1993
%P 159-267

%L Acha93a
%K olit ecoop93
%A Bruno Achauer
%T Implementation of Distributed Trellis
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 103-117
%X DOWL is an extension of the Trellis language supporting
   distribution.  It allows programmers to transparently invoke
   operations on remote objects and to move objects between the nodes
   of a distributed system.  A few primitives permit the programmer to
   take full advantage of distribution and to tune performance; most
   notably by restricting the mobility of objects and specifying which
   objects should move together.  This paper describes the
   implementation of these extensions: the object format, communication
   system and the mechanism to invoke operations on remote objects.
   Performance figures are also presented.

%L Adam88a
%K olit-oopl scheme lisp (smc)
%A Norman Adams
%A Jonathan Rees
%T Object-Oriented Programming in Scheme
%J Conference Record of the 1988 ACM Conference on Lisp
   and Functional Programming
%P 277-288
%D August 1988
%X A small set of additions to Scheme to support object-oriented
   programming, including a form of multiple inheritance is described.
   The extensions proposed are in keeping with the spirit of the Scheme
   language and consequently differ from Lisp-based object systems such
   as Flavors and the Common Lisp Object System. The extensions mesh
   neatly with the underlying Scheme system. The authors motivate the
   design with examples, and describe implementation techniques that
   yields efficiency comparable to dynamic object-oriented language
   implementations considered to be high performance. The complete
   design has an almost-portable implementation, and the core of this
   design comprises the object system used in T, a dialect of Scheme.
   The applicative bias of the approach is unusual in object- oriented
   programming systems.

%L Adam89a
%K olit oopsla89
%A Sam S. Adams
%A Abdul K. Nabi
%T Neural Agents -- A Frame of Mind
%J Proceedings OOPSLA '89, ACM SIGPLAN Notices
%V 24
%N 10
%D Oct 1989
%P 139-150

%L Ader90a
%K olit-ithaca osg cool scripting vista
%A Martin Ader
%A Oscar Nierstrasz
%A Stephen McMahon
%A Gerhard M\:uller
%A Anna-Kristin Pr\:ofrock
%T The ITHACA Technology: A Landscape for
   Object-Oriented Application Development
%B Proceedings, Esprit 1990 Conference
%I Kluwer Academic Publishers
%C Dordrecht, NL
%D 1990
%P 31-51
%X The ITHACA environment offers an application support system which
   incorporates advanced technologies in the fields of object-oriented
   programming in general and programming languages, database
   technologies, user interface systems and software development tools in
   particular. ITHACA provides an integrated and open-ended toolkit which
   exploits the benefits of object-oriented technologies for promoting
   reusability, tailorability and integratability, factors which are
   crucial for ensuring software quality and productivity. Industrial
   applications from the fields of office automation, public
   administration, finance/insurance and chemical engineering are
   developed in parallel and used to evaluate the suitability of the
   system.
%% CONFERENCE

%L Mong93
%K olit-ithaca ithaca-final
%A Josep Mongui\'o
%T COP overview
%I TAO S.A.
%D 31/12/93
%X WooRKS is a workflow package which has been developed to prove
   the usefulness of the ITHACA development environment.
   A workflow package is characterised by the coordination
   and routing mechanisms which allow to control the interaction
   and to schedule the work to be performed by office workers.
   Within this paper we describe COP, the module implementing
   the coordination functionality of WooRKS.
%% ftp: cui.unige.ch:OO-articles/ITHACA/cop.ps.Z

%L Ader94a
%K olit-ithaca ithaca-final
%A Martin Ader
%A Gang Lu
%A Patrick Pons
%A Josep Monguio
%A Lose Lopez
%A Giorgio De Michelis
%A M. Antonietta Grasso
%A George Vlondakis
%T WooRKS, an Object Oriented WorkflowSystem for Offices
%R ITHACA technical report
%I Bull S.A., T.A.O. S.A., Universit\'a di Milano, and
   Communication and Management Systems Unit
%D 1994
%X A lot of routine office tasks (e.g., processing an order in a retail
   company) can be described as structured recurring tasks (called
   \fIprocedures\fR) whose basic items (called \fIactivities\fR) must
   be performed by various persons and computers (called \fIactors\fR)
   in a certain order (sequential or parallel). Inside a procedure, the
   coordination between actors in different places is asynchronous and
   is characterized by the circulation of folders, forms or papers.
   Many procedures can spread over several weeks. \fIWoorks\fR is an
   object-oriented workflow system designed to assist organizations in
   defining, executing, coordinating, and monitoring workflow
   procedures based on a shared environment. WooRKS architecture relies
   on an object oriented database management system upon which all the
   objects are represented and supported by a UNIX (TM) server, and
   clients distributed through TCP/IP protocol runing Microsoft Windows
   (TM) or OSF/Motif (TM). WooRKS incorporates several interrelated
   models that can be used together or separately: an \fIorganization
   model\fR for specifying the actors, an \fIinformation module\fR for
   defining information to be handled, a \fItime model\fR for
   controlling when actions must be executed, an \fIoperator model\fR
   for implementing atomic operations on information, and a
   \fIprocedure model\fR for combining together these various
   components. Through the use of object oriented technologies, WooRKs
   provides: a comprehensive system to design, implement and
   administrate workflow applications; a consistent set of high-level
   formalisms to describe a workflow application; a powerful
   organizational model; extensive time and external management
   utilities; a graphical editor for the workflow procedure definition;
   easy integration with existing office applications; an informative
   and consistent end user interface; discretionary security control;
   and high reusability of software components enabling quick delivery
   of customer-specified workflow applications.
%% ftp: cui.unige.ch:OO-articles/ITHACA/WooRKS

%L Ages93a
%K olit ecoop93
%A Ole Agesen
%A Jens Palsberg
%A Michael I. Schwartzbach
%T Type Inference of SELF: Analysis of Objects with Dynamic and
   Multiple Inheritance
%B Proceedings ECOOP '93
%E O. Nierstrasz
%S LNCS 707
%I Springer-Verlag
%C Kaiserslautern, Germany
%D July 1993
%P 247-267
%X We have designed and implemented a type inference algorithm for the
   full Self language. The algorithm can guarantee the safety and
   disambiguity of message sends, and provide useful information for
   browsers and optimizing compilers. Self features objects with
   dynamic inheritance. This construct has until now been considered
   incompatible with type inference because it allows the inheritance
   graph to change dynamically. Our algorithm handles this by deriving
   and solving type constraints that simultaneously define supersets of
   both the possible values of expressions and of the possible
   inheritance graphs. The apparent circularity is resolved by
   computing a global fixed-point, in polynomial time.  The algorithm
   has been implemented and can successfully handle the Self benchmark
   programs, which exist in the "standard Self world" of more than
   40,000 lines of code.
%% ftp: daimi.aau.dk:pub/palsberg/papers/ecoop93.ps.Z

%L Agh93c
%K olit-obc binder (shelf)
%E Gul Agha
%E Peter Wegner
%E Akinori Yonezawa
%T Research Directions in Concurrent Object-Oriented Programming
%I MIT Press
%D 1993

%L Agha85a
%K concurrency messages actors
%A Gul Agha
%T A Message-Passing Paradigm for Object Management
%J IEEE Database Engineering
%V 8
%N 4
%D Dec 1985
%P 75-82

%L Agha86a
%K olit-obc concurrency messages actors oopws86
%A Gul Agha
%T An Overview of Actor Languages
%J ACM SIGPLAN Notices
%V 21
%N 10
%D Oct 1986
%P 58-67

%L Agha86b
%K olit-obc semantics obib(obcp)
%A Gul Agha
%T ACTORS: A Model of Concurrent Computation in Distributed Systems
%I MIT Press
%C Cambridge, Massachusetts
%D 1986

%L Agha93a
%K olit-obc actors semantics
%A Gul Agha
%A Ian Mason
%A Scott Smith
%A Carolyn Talcott
%T A Foundation for Actor Computation
%R technical report
%I UIUC
%D 1993
%X We present an actor language which is an extension of a simple
   functional language, and provide a precise operational semantics for
   this extension.  Actor configurations are open distributed systems,
   meaning we explicitly take into account the interface with external
   components in the specification of an actor system.  We define and
   study various notions of equivalence on actor expressions and
   configurations.
%% ftp: sail.stanford.edu:pub/MT/93actors.ps.Z

%L Agha93b
%K olit-obc binder
%A Gul Agha
%A Svend Fr\/olund
%A Woo Young Kim
%A Rajendra Panwar
%A Anna Patterson
%A Daniel Sturman
%T Abstraction and Modulairt Mechanisms for Concurrent Computing
%J IEEE Parallel and Dsitributed Technology
%D May 1993
%P 3-14

%L Agra91a
%K types olit oopsla91
%A Rakesh Agrawal
%A Linda G. DeMichiel
%A Bruce G. Lindsay
%T Static Type Checking of Multi-Methods
%J Proceedings OOPSLA '91, ACM SIGPLAN Notices
%V 26
%N 11
%D Nov 1991
%P 113-128

%L Ahls83a
%K oislit survey
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T A Survey of Office Information Systems
%R Syslab, WP 44
%I University of Stockholm
%D March 15, 1983

%L Ahls84a
%K olit-oopl opal ois
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T An Architecture for Object Management in OIS
%J ACM TOOIS
%V 2
%N 3
%D July 1984
%P 173-196

%L Ahls84b
%K types other
%A Matts Ahls\'en
%A Anders Bj\:ornerstedt
%A Stefan Britts
%A Christer Hult\'en
%A Lars S\:oderlund
%T Making Type Changes Transparent
%R Syslab report #22
%I University of Stockholm
%D Feb 1984

